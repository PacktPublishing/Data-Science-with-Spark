{"paragraphs":[{"text":"// Reuse the stemmedTwitter we have created in section 06.2.\nval sample = stemmedTwitter\n  .rdd\n  .sample(fraction = 0.1, withReplacement = false)\n  .collect\nval df = sc.parallelize(sample).toDF(\"words\")","dateUpdated":"2016-12-14T09:35:44+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703552916_-741687206","id":"20161213-092600_1493752268","result":{"code":"SUCCESS","type":"TEXT","msg":"sample: Array[Seq[String]] = Array(WrappedArray(rt, @halsey, :, i, now, !, https://t.co/m7cpvyghjo), WrappedArray(listen, riot, -lrb-, prod, ., mxs, beats, -rrb-, miles, $, tone, #np, #soundcloud, https://t.co/dyketqpa6n), WrappedArray(@gunsandcrayons, i, just, get, back, i, need, quote), WrappedArray(rt, @oneperfectshot, :, oldboy, -lrb-, 2003, -rrb-, dop, :, chung-hoon, chung, |, dir, :, chan-wook, park, https://t.co/z6d7tect7e), WrappedArray(rt, @sassycxss, :, u, wit, ur, man, friend, say, ``, doin, '', https://t.co/rm4wh51juv), WrappedArray(rt, @, 63moonsofficial, :, #forcedmerger, 63k, shareholder, ,, welfare, prime, concern, @amitshah, @arunjaitley, ht, ...), WrappedArray(talk, one, ,, privilege, know, i, adolence, year, .), WrappedArray(rt, @deptofaustralia, :, please, grab, aust...\ndf: org.apache.spark.sql.DataFrame = [words: array<string>]\n"},"dateCreated":"2016-12-14T09:19:12+0100","dateStarted":"2016-12-14T09:35:44+0100","dateFinished":"2016-12-14T09:35:45+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:131"},{"text":"import org.apache.spark.ml.feature.CountVectorizer\nimport org.apache.spark.mllib.clustering.LDA\nimport org.apache.spark.ml.linalg.Vector\nimport org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.sql.Row\n\nval cvModel = new CountVectorizer()\n  .setInputCol(\"words\")\n  .setOutputCol(\"features\")\n  .setVocabSize(300)\n  .setMinDF(2)\n  .fit(df)\n\nval vocabulary = cvModel.vocabulary","dateUpdated":"2016-12-14T09:35:47+0100","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703552918_-740917708","id":"20161213-092637_1327620401","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.ml.feature.CountVectorizer\n\nimport org.apache.spark.mllib.clustering.LDA\n\nimport org.apache.spark.ml.linalg.Vector\n\nimport org.apache.spark.mllib.linalg.Vectors\n\nimport org.apache.spark.sql.Row\n\ncvModel: org.apache.spark.ml.feature.CountVectorizerModel = cntVec_581e0bc58b2d\nvocabulary: Array[String] = Array(:, rt, ., ,, i, ..., !, '', ``, /, &, ?, -, get, -lrb-, 's, can, $, -rrb-, girl, like, say, just, need, love, year, day, make, now, new, go, will, u, see, 3, --, happy, free, guy, people, watch, lot, one, white, w, today, time, lol, via, friend, ;, know, first, ', #, think, win, best, #aldubweddingprep, call, let, @youtube, look, http, 2016, 1, @, star, 2, zimmerman, use, black, even, world, *, good, birthday, 4, life, little, 17, video, ball, many, much, kid, #a, week, hear, wonder, `, prime, 18, thank, india, vote, bitch, @heymanhustle, child, talk, ❤, never, kill, yet, change, shoot, take, act, something, real, parent, refugee, bayer, pretend, trump, important, walk, someone, voice, anyone, show, ur, record, wait, hour, award, hope, car, kiss, awesom..."},"dateCreated":"2016-12-14T09:19:12+0100","dateStarted":"2016-12-14T09:35:47+0100","dateFinished":"2016-12-14T09:35:48+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:132"},{"text":"val features = cvModel\n  .transform(df)\n  .select(\"features\")","dateUpdated":"2016-12-14T09:35:50+0100","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703552919_-741302457","id":"20161213-093033_1547713885","result":{"code":"SUCCESS","type":"TEXT","msg":"\nfeatures: org.apache.spark.sql.DataFrame = [features: vector]\n"},"dateCreated":"2016-12-14T09:19:12+0100","dateStarted":"2016-12-14T09:35:50+0100","dateFinished":"2016-12-14T09:35:50+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:133"},{"text":"val corpus = features.rdd.map {\n  case Row(features: Vector) => Vectors.fromML(features)\n}.zipWithIndex().map(_.swap)","dateUpdated":"2016-12-14T09:35:52+0100","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703552919_-741302457","id":"20161213-093040_1423098553","result":{"code":"SUCCESS","type":"TEXT","msg":"\ncorpus: org.apache.spark.rdd.RDD[(Long, org.apache.spark.mllib.linalg.Vector)] = MapPartitionsRDD[76] at map at <console>:67\n"},"dateCreated":"2016-12-14T09:19:12+0100","dateStarted":"2016-12-14T09:35:52+0100","dateFinished":"2016-12-14T09:35:53+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:134"},{"text":"val lda = new LDA()\n\nlda.setK(3)\n  .setMaxIterations(10)\n  .setTopicConcentration(10)\n  \nval ldaModel = lda.run(corpus)","dateUpdated":"2016-12-14T09:35:55+0100","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703552919_-741302457","id":"20161213-093048_99175591","result":{"code":"SUCCESS","type":"TEXT","msg":"\nlda: org.apache.spark.mllib.clustering.LDA = org.apache.spark.mllib.clustering.LDA@1b0b07de\n\nres12: lda.type = org.apache.spark.mllib.clustering.LDA@1b0b07de\n\nldaModel: org.apache.spark.mllib.clustering.LDAModel = org.apache.spark.mllib.clustering.DistributedLDAModel@77c7ca6e\n"},"dateCreated":"2016-12-14T09:19:12+0100","dateStarted":"2016-12-14T09:35:55+0100","dateFinished":"2016-12-14T09:35:58+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:135"},{"text":"val topicIndices = ldaModel.describeTopics(maxTermsPerTopic = 20)\n\nval topics = topicIndices.map {\n  case (terms, termWeights) =>\n    terms.zip(termWeights).map {\n      case (term, weight) => (vocabulary(term.toInt), weight) }\n}","dateUpdated":"2016-12-14T09:35:57+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703552919_-741302457","id":"20161213-094514_1489105218","result":{"code":"SUCCESS","type":"TEXT","msg":"topicIndices: Array[(Array[Int], Array[Double])] = Array((Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17, 18, 19),Array(0.10949859012214588, 0.085178271537342, 0.052076345128049074, 0.03731954607409205, 0.03660387417207229, 0.03564903161685045, 0.0220540768201129, 0.014985409190778896, 0.011828001489061584, 0.010255317918092756, 0.009067492794399168, 0.008670671327330206, 0.008280505728801135, 0.008278508094358249, 0.007887240815173205, 0.0074908685173960335, 0.007489512558491978, 0.00710442569007627, 0.007096956064165867, 0.00670253256552679)), (Array(0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 16, 15, 18, 17, 20),Array(0.10800462542660014, 0.08647444334551697, 0.052116044414386324, 0.0374461788001693, 0.037258713533437536, 0.03530835379549529, 0.0220784135432...topics: Array[Array[(String, Double)]] = Array(Array((:,0.10949859012214588), (rt,0.085178271537342), (.,0.052076345128049074), (,,0.03731954607409205), (i,0.03660387417207229), (...,0.03564903161685045), (!,0.0220540768201129), ('',0.014985409190778896), (``,0.011828001489061584), (/,0.010255317918092756), (&,0.009067492794399168), (?,0.008670671327330206), (-,0.008280505728801135), (get,0.008278508094358249), (-lrb-,0.007887240815173205), (can,0.0074908685173960335), ('s,0.007489512558491978), ($,0.00710442569007627), (-rrb-,0.007096956064165867), (girl,0.00670253256552679)), Array((:,0.10800462542660014), (rt,0.08647444334551697), (.,0.052116044414386324), (i,0.0374461788001693), (,,0.037258713533437536), (...,0.03530835379549529), (!,0.022078413543254988), ('',0.014964260914941073),..."},"dateCreated":"2016-12-14T09:19:12+0100","dateStarted":"2016-12-14T09:35:57+0100","dateFinished":"2016-12-14T09:35:59+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:136"},{"text":"topics.zipWithIndex.foreach { case (topic, i) =>\n  println(s\"Topic $i\")\n  topic.foreach { case (term, weight) =>\n    println(s\"$term\\t$weight\")\n  }\n  println()\n}","dateUpdated":"2016-12-14T09:36:00+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703552920_-743226202","id":"20161213-094519_1438482841","result":{"code":"SUCCESS","type":"TEXT","msg":"Topic 0\n:\t0.10949859012214588\nrt\t0.085178271537342\n.\t0.052076345128049074\n,\t0.03731954607409205\ni\t0.03660387417207229\n...\t0.03564903161685045\n!\t0.0220540768201129\n''\t0.014985409190778896\n``\t0.011828001489061584\n/\t0.010255317918092756\n&\t0.009067492794399168\n?\t0.008670671327330206\n-\t0.008280505728801135\nget\t0.008278508094358249\n-lrb-\t0.007887240815173205\ncan\t0.0074908685173960335\n's\t0.007489512558491978\n$\t0.00710442569007627\n-rrb-\t0.007096956064165867\ngirl\t0.00670253256552679\n\nTopic 1\n:\t0.10800462542660014\nrt\t0.08647444334551697\n.\t0.052116044414386324\ni\t0.0374461788001693\n,\t0.037258713533437536\n...\t0.03530835379549529\n!\t0.022078413543254988\n''\t0.014964260914941073\n``\t0.011823162766404369\n/\t0.010240573202939663\n&\t0.009060063560973212\n?\t0.008672379252250612\nget\t0.008275953216513917\n-\t0.00827314375832814\n-lrb-\t0.007874801466418356\ncan\t0.007486980285376083\n's\t0.007485410110941753\n-rrb-\t0.007087832347272038\n$\t0.00708276886872992\nlike\t0.006700938672770351\n\nTopic 2\n:\t0.11070984194376458\nrt\t0.085726300270414\n.\t0.05283074589916857\n,\t0.03758165833795016\ni\t0.03692996357382967\n...\t0.035300445573772155\n!\t0.021983394792259043\n''\t0.014914695004156578\n``\t0.011768092092719866\n/\t0.010200793287320235\n&\t0.00902719056260008\n?\t0.008631066129863123\n-\t0.00823982326297496\nget\t0.008239013451934446\n-lrb-\t0.007850778485787135\n's\t0.007457259211344467\ncan\t0.007454342894990928\n-rrb-\t0.007066746436001718\n$\t0.007064350264178106\nlike\t0.0066698190416525195\n\n"},"dateCreated":"2016-12-14T09:19:12+0100","dateStarted":"2016-12-14T09:36:00+0100","dateFinished":"2016-12-14T09:36:01+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:137"},{"text":"","dateUpdated":"2016-12-14T09:19:12+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703552920_-743226202","id":"20161213-094522_1907186961","dateCreated":"2016-12-14T09:19:12+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:138"}],"name":"06.4","id":"2C3CZWJXU","angularObjects":{"2BXV59BJ5:shared_process":[],"2BZ7JWBYX:shared_process":[],"2BYKQAFE3:shared_process":[],"2BXX92DZZ:shared_process":[],"2BY8191PX:shared_process":[],"2C242HAW7:shared_process":[],"2BXRBYBNN:shared_process":[],"2C1F64B57:shared_process":[],"2BXESURSJ:shared_process":[],"2BZSUGKDS:shared_process":[],"2C26Y211G:shared_process":[],"2C1URPXW3:shared_process":[],"2BZN774H8:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}