{"paragraphs":[{"text":"import java.util.Properties\n\nimport edu.stanford.nlp.ling.CoreAnnotations._\nimport edu.stanford.nlp.pipeline._\nimport edu.stanford.nlp.sentiment.SentimentCoreAnnotations.SentimentClass\nimport org.scalatest.FunSuite\n\nimport scala.io.Source\nimport scala.collection.JavaConverters._\nimport scala.collection.JavaConversions._\nimport scala.collection.mutable.ArrayBuffer\n\ndef sentiment(text: String, pipeline: StanfordCoreNLP) = {\n    val document = new Annotation(text)\n    pipeline.annotate(document)\n    var sentiments = 0\n    val sentences = document.get(classOf[SentencesAnnotation])\n    for (sentence <- sentences.asScala; token <- sentence.get(classOf[TokensAnnotation]).asScala) {\n      val sentiment = token.get(classOf[SentimentClass]).toLowerCase\n      sentiment match {\n        case \"very positive\" => sentiments += 2\n        case \"positive\" => sentiments += 1\n        case \"neutral\" =>\n        case \"negative\" => sentiments -= 1\n        case \"very negative\" => sentiments -= 2\n        case _ =>\n      }\n    }\n    (sentiments, text)\n}","dateUpdated":"2016-12-13T09:24:11+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481617395075_-316940808","id":"20161213-092315_795808989","dateCreated":"2016-12-13T09:23:15+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1544","dateFinished":"2016-12-13T09:24:19+0100","dateStarted":"2016-12-13T09:24:11+0100","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport java.util.Properties\n\nimport edu.stanford.nlp.ling.CoreAnnotations._\n\nimport edu.stanford.nlp.pipeline._\n\nimport edu.stanford.nlp.sentiment.SentimentCoreAnnotations.SentimentClass\n\nimport org.scalatest.FunSuite\n\nimport scala.io.Source\n\nimport scala.collection.JavaConverters._\n\nimport scala.collection.JavaConversions._\n\nimport scala.collection.mutable.ArrayBuffer\n\nsentiment: (text: String, pipeline: edu.stanford.nlp.pipeline.StanfordCoreNLP)(Int, String)\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481617451689_-1788377133","id":"20161213-092411_86308999","dateCreated":"2016-12-13T09:24:11+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1616","dateUpdated":"2016-12-13T09:25:08+0100","dateFinished":"2016-12-13T09:25:34+0100","dateStarted":"2016-12-13T09:25:08+0100","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntweets: org.apache.spark.sql.DataFrame = [accessLevel: bigint, contributors: array<string> ... 33 more fields]\n\nsentiments: org.apache.spark.sql.Dataset[(Int, String)] = [_1: int, _2: string]\n(0,RT @halsey: I do now! 🌹🌹🌹  https://t.co/m7cpvygHJo)\n(-1,@andrew8088 hey can you please provide bookmarks.js file from \"Learning MongoDB(2013)\" course.  \nP.S I'm not user of tutsplus.)\n(0,my check gonna be supa fat doe 🤑)\n(1,RT @lFRANKOCEANl: My biggest fear is being replaced.)\n(1,RT @63moonsofficial: A #ForcedMerger would be against 63k shareholders, their welfare should be the prime concern @AmitShah @arunjaitley ht…)\n(2,RT @ddree__: haunted houses more fun when u with a group😂😂😂)\n(0,RT @LeeJongSukWorld: #LeeJongSuk and #HanHyoJoo  for Dazed Korea ヽ(^0^)ﾉ https://t.co/4b3bVDcYgh)\n(0,RT @LAGalaxy: 😎👊🏾\n\n@TheRealAC3 is up for Player of the Year & you can vote for him here: https://t.co/43JhMzBVB2 (@Herbalife) https://t.co/…)\n(0,RT @LARRAYOX: @LARRAYOX IS IT JUST ME OR DOES IT LOOK LIKE IM FLOATING IN THE FIRST ONE)\n(0,@Gurmeetramrahim #LionHeartCrossed150Cr GOOD AFTERNOON DrMSG G)\n"},"text":"val tweets = spark.read.parquet(\"/dataset/twitter/reference\")\n\nval sentiments = tweets.mapPartitions(it => {\n\n  val props = new Properties()\n  props.put(\"annotators\", \"tokenize, ssplit, pos, parse, sentiment\")\n  props.put(\"pos.model\", \"/dataset/models/gate-EN-twitter.model\")\n\n  val pipeline = new StanfordCoreNLP(props)\n\n  it.map { tweet => sentiment(tweet.getAs[String](\"text\"), pipeline) }\n\n})\n\nsentiments.take(10).foreach(println)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481617454051_-922692108","id":"20161213-092414_1703425723","dateCreated":"2016-12-13T09:24:14+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1691","dateUpdated":"2016-12-13T09:25:22+0100","dateFinished":"2016-12-13T09:25:23+0100","dateStarted":"2016-12-13T09:25:22+0100","result":{"code":"SUCCESS","type":"TEXT","msg":"n\t00875246\t0.5\t0\testimation#4 estimate#2\ta judgment of the qualities of something or somebody; \"many factors are involved in any estimate of human life\"; \"in my estimation the boy is innocent\"\nn\t05803379\t0\t0.25\tidea#4 estimation#3 estimate#1 approximation#1\tan approximate calculation of quantity or degree or worth; \"an estimate of what it would cost\"; \"a rough idea how long it would take\"\nn\t06207029\t0.25\t0\testimation#2 estimate#5\tthe respect with which a person is held; \"they had a high estimation of his ability\"\nn\t06528783\t0\t0\testimation#1 estimate#3 appraisal#2\ta document appraising the value of something (as for insurance or taxation)\nv\t00672433\t0\t0\tjudge#3 guess#3 gauge#1 estimate#1 approximate#2\tjudge tentatively or form an estimate of (quantities or time); \"I estimate this chicken to weigh three pounds\"\nv\t00712135\t0\t0\treckon#2 forecast#2 figure#1 estimate#2 count_on#1 calculate#2\tjudge to be probable\n"},"text":"%sh grep \" estimate#\" /dataset/sentiment/SentiWordNet-v0.3/sentiwordnet.tsv "},{"text":"import java.{util => ju}\n\nimport scala.io.Source\nimport scala.collection.JavaConversions._\n\nvar synsets = new ju.HashMap[String, Double]\n\ndef init(sentinetword: String) {\n  val lines = Source.fromFile(sentinetword)\n  val dictionary = new ju.HashMap[String, ju.HashMap[Integer, Double]]\n  for (line <- lines.getLines()) {\n    if (! line.trim.startsWith(\"#\")) {\n      val data = line.split(\"\\t\")\n    /*\n      n    NOUN\n      v    VERB\n      a    ADJECTIVE\n      s    ADJECTIVE SATELLITE\n      r    ADVERB\n     */\n      val wordTypeMarker = data(0)\n      val synsetScore = data(2).toDouble - data(3).toDouble\n      val synTermsSplit = data(4).split(\" \")\n      for (synTermSplit <- synTermsSplit) {\n        val synTermAndRank = synTermSplit.split(\"#\")\n        val synTerm = synTermAndRank(0) + \"#\" + wordTypeMarker\n        val synTermRank = synTermAndRank(1).toInt\n        if (! dictionary.containsKey(synTerm)) dictionary.put(synTerm, new ju.HashMap[Integer, Double])\n        dictionary.get(synTerm).put(synTermRank, synsetScore)\n      }\n    }\n  }\n  for (entry <- dictionary.entrySet) {\n    val word = entry.getKey\n    val synSetScoreMap = entry.getValue\n    var score = 0.0\n    var sum = 0.0\n    for (setScore <- synSetScoreMap.entrySet) {\n      score += setScore.getValue / setScore.getKey\n      sum += 1.0 / setScore.getKey\n    }\n    score /= sum\n    synsets.put(word, score)\n  }\n}\n\ndef sentiment(word: String, pos: String): Double = {\n  return synsets.get(word + \"#\" + pos)\n}\n\ninit(\"/dataset/sentiment/SentiWordNet-v0.3/sentiwordnet.tsv\")\n\nprintln(\"good # a \" + sentiment(\"good\", \"a\"))\nprintln(\"bad # a \" + sentiment(\"bad\", \"a\"))\nprintln(\"yellow # a \" + sentiment(\"blue\", \"a\"))\nprintln(\"yellow # n \" + sentiment(\"blue\", \"n\"))","dateUpdated":"2016-12-13T09:25:32+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481617522153_-890465145","id":"20161213-092522_191821412","dateCreated":"2016-12-13T09:25:22+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1767","dateFinished":"2016-12-13T09:25:36+0100","dateStarted":"2016-12-13T09:25:32+0100","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport java.{util=>ju}\n\nimport scala.io.Source\n\nimport scala.collection.JavaConversions._\n\nsynsets: java.util.HashMap[String,Double] = {}\n\ninit: (sentinetword: String)Unit\n\nsentiment: (word: String, pos: String)Double\ngood # a 0.6337632198238539\nbad # a -0.5706406664316871\nyellow # a -0.21950284713096807\nyellow # n 0.0\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481617532812_-1129363564","id":"20161213-092532_225584760","dateCreated":"2016-12-13T09:25:32+0100","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1841","dateUpdated":"2016-12-13T09:25:43+0100","text":""}],"name":"06.3","id":"2C62B871T","angularObjects":{"2BXV59BJ5:shared_process":[],"2BZ7JWBYX:shared_process":[],"2BYKQAFE3:shared_process":[],"2BXX92DZZ:shared_process":[],"2BY8191PX:shared_process":[],"2C242HAW7:shared_process":[],"2BXRBYBNN:shared_process":[],"2C1F64B57:shared_process":[],"2BXESURSJ:shared_process":[],"2BZSUGKDS:shared_process":[],"2C26Y211G:shared_process":[],"2C1URPXW3:shared_process":[],"2BZN774H8:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}