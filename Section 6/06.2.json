{"paragraphs":[{"text":"import java.util.Properties\n\nimport edu.stanford.nlp.ling.CoreAnnotations._\nimport edu.stanford.nlp.pipeline._\nimport edu.stanford.nlp.sentiment.SentimentCoreAnnotations.SentimentClass\nimport org.scalatest.FunSuite\n\nimport scala.io.Source\nimport scala.collection.JavaConverters._\nimport scala.collection.JavaConversions._\nimport scala.collection.mutable.ArrayBuffer\n\ndef stem(text: String, stopWords: Set[String], pipeline: StanfordCoreNLP): Seq[String] = {\n  val doc = new Annotation(text)\n  pipeline.annotate(doc)\n  val stems = new ArrayBuffer[String]()\n  val sentences = doc.get(classOf[SentencesAnnotation])\n  for (sentence <- sentences.asScala; token <- sentence.get(classOf[TokensAnnotation]).asScala) {\n    val stem = token.get(classOf[LemmaAnnotation])\n    if (!stopWords.contains(stem)) {\n      stems += stem.toLowerCase\n    }\n  }\n  stems\n}","dateUpdated":"2016-12-14T09:22:37+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703700356_-537002436","id":"20161212-174004_1548111544","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport java.util.Properties\n\nimport edu.stanford.nlp.ling.CoreAnnotations._\n\nimport edu.stanford.nlp.pipeline._\n\nimport edu.stanford.nlp.sentiment.SentimentCoreAnnotations.SentimentClass\n\nimport org.scalatest.FunSuite\n\nimport scala.io.Source\n\nimport scala.collection.JavaConverters._\n\nimport scala.collection.JavaConversions._\n\nimport scala.collection.mutable.ArrayBuffer\n\nstem: (text: String, stopWords: Set[String], pipeline: edu.stanford.nlp.pipeline.StanfordCoreNLP)Seq[String]\n"},"dateCreated":"2016-12-14T09:21:40+0100","dateStarted":"2016-12-14T09:22:37+0100","dateFinished":"2016-12-14T09:22:45+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3377"},{"text":"val stopWords = sc.broadcast(Source.fromFile(\"/dataset/stop-words/stop-words.txt\").getLines().toSet).value","dateUpdated":"2016-12-14T09:22:40+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703700356_-537002436","id":"20161212-174024_1594686814","result":{"code":"SUCCESS","type":"TEXT","msg":"stopWords: scala.collection.immutable.Set[String] = Set(down, it's, that's, for, ours \tourselves, further, she'll, any, there's, this, haven't, in, ought, myself, have, your, off, once, i'll, are, is, his, why, too, why's, am, than, isn't, didn't, himself, but, you're, below, what, would, i'd, if, you'll, own, they'll, up, we're, they'd, so, our, do, all, him, had, nor, before, it, a, she's, as, hadn't, because, has, she, yours, or, above, yourself, herself, she'd, such, they, each, can't, don't, i, until, that, out, he's, cannot, to, we've, hers, you, did, let's, most, here, these, hasn't, was, there, when's, shan't, doing, at, through, been, over, i've, on, being, same, how, whom, my, after, who, itself, me, them, by, then, couldn't, he, should, few, wasn't, again, while, their, not, ..."},"dateCreated":"2016-12-14T09:21:40+0100","dateStarted":"2016-12-14T09:22:40+0100","dateFinished":"2016-12-14T09:22:46+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3378"},{"text":"val tweets = spark.read.parquet(\"/dataset/twitter/reference\")\ntweets.count","dateUpdated":"2016-12-14T09:24:21+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703700356_-537002436","id":"20161212-174542_645657103","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntweets: org.apache.spark.sql.DataFrame = [accessLevel: bigint, contributors: array<string> ... 33 more fields]\n\nres6: Long = 4437\n"},"dateCreated":"2016-12-14T09:21:40+0100","dateStarted":"2016-12-14T09:24:21+0100","dateFinished":"2016-12-14T09:24:22+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3379"},{"text":"val stemmedTwitter = tweets.mapPartitions(it => {\n\n  val props = new Properties()\n  props.put(\"annotators\", \"tokenize, ssplit, pos, lemma\")\n  props.put(\"pos.model\", \"/dataset/models/gate-EN-twitter.model\")\n  val pipeline = new StanfordCoreNLP(props)\n\n  it.map { tweet => stem(tweet.getAs[String](\"text\"), stopWords, pipeline) }\n\n})\n\nstemmedTwitter.persist\n\nstemmedTwitter.printSchema\n\nstemmedTwitter.take(5).foreach(println)","dateUpdated":"2016-12-14T09:24:26+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703700356_-537002436","id":"20161212-174621_1564929868","result":{"code":"SUCCESS","type":"TEXT","msg":"\nstemmedTwitter: org.apache.spark.sql.Dataset[Seq[String]] = [value: array<string>]\n\nres7: stemmedTwitter.type = [value: array<string>]\nroot\n |-- value: array (nullable = true)\n |    |-- element: string (containsNull = true)\n\nWrappedArray(rt, @halsey, :, i, now, !, https://t.co/m7cpvyghjo)\nWrappedArray(@andrew8088, hey, can, please, provide, bookmarks.js, file, ``, learn, mongodb, -lrb-, 2013, -rrb-, '', course, ., p.s, i, user, tutsplus, .)\nWrappedArray(check, gon, na, supa, fat, doe)\nWrappedArray(rt, @lfrankoceanl, :, biggest, fear, replace, .)\nWrappedArray(rt, @, 63moonsofficial, :, #forcedmerger, 63k, shareholder, ,, welfare, prime, concern, @amitshah, @arunjaitley, ht, ...)\n"},"dateCreated":"2016-12-14T09:21:40+0100","dateStarted":"2016-12-14T09:24:26+0100","dateFinished":"2016-12-14T09:24:49+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3380"},{"text":"tweets.count\nval s = stemmed.flatMap(identity)\ns.count\ns.filter(t => t.startsWith(\"#\")).count","dateUpdated":"2016-12-14T09:21:40+0100","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703700357_-537387185","id":"20161212-174629_84303960","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres5: Long = 4437\n\ns: org.apache.spark.sql.Dataset[String] = [value: string]\n\nres6: Long = 51797\n\nres7: Long = 1783\n"},"dateCreated":"2016-12-14T09:21:40+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3381"},{"text":"s.filter(t => t.startsWith(\"@\")).count\ns.filter(t => t.startsWith(\"http\")).count","dateUpdated":"2016-12-14T09:21:40+0100","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703700357_-537387185","id":"20161212-174636_1852251276","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres8: Long = 4151\n\nres9: Long = 2642\n"},"dateCreated":"2016-12-14T09:21:40+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3382"},{"text":"","dateUpdated":"2016-12-14T09:21:40+0100","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1481703700357_-537387185","id":"20161212-174642_608393647","dateCreated":"2016-12-14T09:21:40+0100","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3383"}],"name":"06.2","id":"2C4W6MNWV","angularObjects":{"2BXV59BJ5:shared_process":[],"2BZ7JWBYX:shared_process":[],"2BYKQAFE3:shared_process":[],"2BXX92DZZ:shared_process":[],"2BY8191PX:shared_process":[],"2C242HAW7:shared_process":[],"2BXRBYBNN:shared_process":[],"2C1F64B57:shared_process":[],"2BXESURSJ:shared_process":[],"2BZSUGKDS:shared_process":[],"2C26Y211G:shared_process":[],"2C1URPXW3:shared_process":[],"2BZN774H8:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}